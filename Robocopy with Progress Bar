# Define the source and destination paths for the Robocopy operation
$source = "C:\path\to\source"
$destination = "D:\path\to\destination"

# Define the Robocopy options
$options = "/E /Z /ETA /PURGE /MT:8 /NP"

# Execute the Robocopy operation and capture the output
$cmd = "robocopy `"$source`" `"$destination`" $options"
$output = Invoke-Expression $cmd 2>&1

# Parse the output to determine the total number of files and bytes to be copied
$totalBytes = [long]([regex]::Matches($output, "Bytes : (\d+)").Value -replace "\D")
$totalFiles = [int]([regex]::Matches($output, "Files : (\d+)").Value -replace "\D")

# Define the progress bar parameters
$progressParams = @{
    Activity = "Copying files..."
    Status = "Copying"
    PercentComplete = 0
    CurrentOperation = ""
    TotalFiles = $totalFiles
    TotalBytes = $totalBytes
}

# Define a function to update the progress bar
function Update-Progress {
    param(
        [Parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]
        [string]$Message,
        
        [Parameter(Mandatory = $true)]
        [long]$BytesProcessed,
        
        [Parameter(Mandatory = $true)]
        [int]$FilesProcessed
    )
    
    $progressParams.CurrentOperation = $Message
    $progressParams.PercentComplete = $BytesProcessed / $progressParams.TotalBytes * 100
    
    Write-Progress @progressParams
    
    if ($FilesProcessed -eq $totalFiles) {
        Write-Host "Finished copying $totalFiles files ($totalBytes bytes)." -ForegroundColor Green
    }
}

# Loop through each line of the Robocopy output and update the progress bar as files are copied
$output | ForEach-Object {
    if ($_ -match "(\d+)%(?:.*)(\d+)/(\d+)") {
        $percentComplete = [int]$Matches[1]
        $bytesProcessed = [long]$Matches[2]
        $filesProcessed = [int]$Matches[3]
        Update-Progress -Message "$percentComplete% complete" -BytesProcessed $bytesProcessed -FilesProcessed $filesProcessed
    }
}
